++++++++++++++++++++++

이전의 리액트 컴포넌트는 클래스형과 함수형으로 나뉨
기존의 개발 방식 또한 일반적으로 함수형 컴포넌트를 주로 사용하되,
상태(state)나 생명 주기 메서드(life cycle method / 생명주기 메서드는 컴포넌트가 브라우저상에 나타나고, 업데이트되고, 사라지게 될 때 호출되는 메서드들이다)를 필요로 할 때에만 클래스형 컴포넌트를 사용하는 방식
기본적으로 클래스형 컴포넌트는 함수형 컴포넌트에 비해 코드가 길고, 복잡한 편이었고, 또 로직의 재사용이 어려움
그러한 단점들 때문에 일반적으로는 주로 함수형 컴포넌트를 많이 사용했고, 필요 시에만 클래스형 컴포넌트를 사용했던 것
클래스형 컴포넌트들이 가지는 이러한 단점들에도 불구하고 우리가 그동안 클래스형 컴포넌트를 사용해야 했던 이유는 클래스의 힘을 빌려야만 리액트가 원활하게 작동할 수 있었던 것

hooks 가 등장함에 따라 함수형 컴포넌트에서도 기존의 클래스형 컴포넌트가 가지고 있던 복잡성, 재사용성등의 단점들까지 같이 해결하면서  이러한 클래스형 컴포넌트의 작업들을 할 수 있게 됨
이러한 hooks에는 대표적으로 2가지가 있는데, 첫번째가 state hook, 두번째가 effect hook
여기에서 이제 리액트 라이브러리에서 제공하는 기본 내장 api 함수인 useState, useEffect 에 대해 설명 할 수 있을텐데

우선 useState에 대해서 먼저 설명하자면, 
이 useState로 인해 리액트에서 함수형 컴포넌트에서도 상태 관리가 가능
useState는 인자로 초기값을 받고, 현재 상태(state)와 현재의 상태를 업데이트 할 수 있는 함수 setState를 반환
이 함수는 핸들러나 다른 곳에서도 호출 할 수 있고
클래스에서 사용하는 this.setState와 유사하지만 이전 state와 새로운 state를 합치지 않는다는 차이점이 있다.

useEffect에 대해서 설명드리자면,
이름이 effect인 이유는, 저희가 주로 수행하는 data를 fetch하는 등의 작업들이 side effect에 해당되기 때문
useEffect는 리액트의 함수형 컴포넌트에서도 이러한 side effects를 실행할 수 있도록 해줌
클래스형 컴포넌트의 componentDidMount나 componentDidUpdate, componentWillUnmount와 같이 생명주기(lifecycle)를 다루는 목적으로 제공되지만 이를 하나의 API로 통합하였다는 것이 차이점
useEffect는 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는데 첫번째 인자로 effect 콜백 함수(실행시키고 싶은 함수)가 전달되고, 두번째 인자로 input이 전달됨
두번째 인자인 input을 설정함으로 인해 특정 상태(state)가 변경될 경우에만 effect 콜백함수가 실행될 수 있도록 설정 할 수 있음
이는 클래스의 componentDidMount와 componentDidUpdate에 해당하게 되는데,
useEffect에서는 인자로 넘겨주는 effect 콜백 함수의 return값이 있는 경우, hook의 cleanup 함수로 인식하고 다음 effect 콜백 함수가 실행되기 전에 실행해줌으로써 클래스의 componentWillUnmount의 역할을 해줄 수 있음.

++++++++++++++++++++++

- React 라이브러리에서 제공하는 기본 내장 API 함수에는 useState와 useEffect가 있다.
- useState는 상태관리, useEffect는 생명주기 관리에 있어 꼭 필요한 메소드들이다.

- 상태관리라 함은 예를들어 우리가 어떠한 사이트에 가입을 하고 그러면 마이페이지에 내 정보들이 쭉 나타날텐데, 이 때 만약 기존 등록한 내 이메일에서 다른 이메일로 수정하고 싶을때, 이러한 변경 가능한 정보들의 상태를 관리해주는것이 상태관리이다. 꼭 이메일이 아니고 내 닉네임이나, 전화번호, 주소 등 여러가지 수정 가능한 정보들이 될 수 있다. 이러한 정보들의 상태를 관리해주는것이 상태관리이고, 이러한 상태 관리를 할 때 꼭 필요한것이 useState이다.

- 생명주기 관리라 함은 브라우저 상에 나타나고, 업데이트되고, 사라지게 될 일련의 데이터들의 관리라고 이해하면 이해하기 쉽다. 예를 들어 우리가 로그인을 했을때는 내 정보가 브라우저상에 나타나고, 내 정보를 수정했을때는 업데이트, 또 로그아웃을 했을때는 내 정보들이 브라우저에서 사라지는 것처럼, 이러한 브라우저상의 나타나고 업데이트되고, 사라지게 되는 일련의 데이터들의 관리를 생명주기 관리라고 생각하면 쉽다. 그리고 이러한 생명주기 관리에 꼭 필요한것이 useEffect이다.

++++++++++++++++++++++
