++++++++++++++++++++++

- MVC패턴이란 Model, View, Controller의 약자로 하나의 애플리케이션 혹은 프로젝트를 개발할 때 그 구성요소를 세가지의 역할로 구분한 디자인패턴이다.

- 모델은 애플리케이션의 정보, 데이터를 나타낸다.
- 모델은 3가지의 규칙이 있다.
    - 첫째, 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 한다.
    - 둘째, 뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 한다. (뷰나 컨트롤러에 의존하지 않는다)
    - 셋째, 변경이 일어나면, 변경 통지에 대한 처리방법을 구현해야만 한다. (변경이 일어나면 뷰나 컨트롤러에게 알려야 한다.)

- 뷰는 무엇을 화면으로 보여줄지 결정하는 역할을 한다. 뷰라는 말 그대로 어떻게 보여줄지 담당하는 컴포넌트이다.
- 뷰는 3가지의 규칙이 있다.
    - 첫째, 모델이 가지고 있는 정보를 따로 저장해서는 안된다.
    - 둘째, 모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야 된다.
    - 셋째, 변경이 일어나면 변경통지에 대한 처리방법을 구현해야만 한다(모델에서 얘기 했던 것처럼 변경이 일어나면 그것을 모델이나 컨트롤러에게 알려 변경에 대한 처리 방법을 구현해야 한다. 즉 사용자가 화면에서 어떠한 정보들을 입력하거나 수정할때 그 입력된 값들을 받아서 컨트롤러나 모델에게 전달해 변경을 알려줘야 한다.)

- 컨트롤러는 모델과 뷰의 중간에서 서로를 잇는 다리 역할을 한다. 
- 컨트롤러는 2가지의 규칙이 있다.
    - 첫째, 모델이나 뷰에 대해서 알고 있어야 한다.
    - 둘째, 모델이나 뷰의 변경을 지속적으로 모니터링 해야 한다.

++++++++++++++++++++++

- MVC패턴을 사용해야 하는 이유는 구분지어놓은 세가지 역할들이 각각 맡은바에만 집중을 할 수 있게 되어 효율적이게 개발을 할 수 있기 때문이다. 세가지의 역할들이 서로 분리되어 각자의 역할에 집중할 수 있게끔 개발을 하게 되면 이후에 유지보수성, 애플리케이션의 확장성, 그리고 유연성이 증가하고, 중복코딩이라는 문제점 또한 사라지게 되는 장점이 있다.

++++++++++++++++++++++