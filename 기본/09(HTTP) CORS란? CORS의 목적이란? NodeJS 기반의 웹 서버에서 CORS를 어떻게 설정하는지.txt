++++++++++++++++++++++

- CORS (Cross-Origin Resource Sharing / 교차 출처 리소스 공유)란 서로 다른 origin(domain) 간 HTTP reqeust가 가능하도록 해주는 표준이다.
- 도메인(domain): naver.com / 오리진(origin): https://www.naver.com/PORT
(도메인과 오리진의 차이는 프로토콜(https://)과 포트번호(80)의 포함 여부이다.)

- XMLHttpRequest와 Fetch API는 동일 출처 정책(Same-Origin Policy)을 따른다.
- 즉 이 API를 사용하는 웹 애플리케이션은 자신의 출처와 동일한 출처의 리소스만 불러올 수 있다는 얘기이다.
- 만약 특정 도메인(오리진)에서 해당 도메인과 다른 도메인(오리진)으로 어떠한 자원(리소스)에 대한 HTTP 요청을 보내게 될 경우, 이러한 요청들은 동일 출처 정책에 따라 제한된다.
- 그렇다면 이런 경우 어떻게 하면 좋을까?
- 바로 CORS를 활용하면 된다.

- 아래의 방법처럼 응답 헤더에 Access-Control-Allow-Origin 설정을 해줄 수도 있지만, 이러한 방법으로 하게 되면 매번 응답 헤더를 설정해줘야 하는 번거로움이 생긴다.

    app.get('/data', (req, res) => {
        res.header("Access-Control-Allow-Origin", "*");
        res.send(data);
    });

- Node.js 미들웨어중 그러한 번거로움을 해결해줄 수 있는 미들웨어가 있는데 바로 CORS이다. 아래의 방법대로 해주면 된다.

    const express = require('express');
    const cors = require('cors');

    const app = express();

    app.use(cors(
        {
            origin: true, // 허락하고자 하는 요청 주소!
            credentials: true, // 설정한 내용을 response 헤더에 추가 해준다!
        }
    )); // CORS 미들웨어 추가!

++++++++++++++++++++++

- CORS란 서로 다른 도메인(오리진) 간의 HTTP 요청들을 동일 출처 정책에 의해 제한되지 않고 잘 작동하도록 허가해주는 표준이다.
- CORS의 목적은 위 설명했듯, 서로 다른 도메인(오리진) 간의 HTTP 요청들을 허가해주는데 있다.
- 설정 방법은 위를 다시 한 번 보자!

++++++++++++++++++++++
