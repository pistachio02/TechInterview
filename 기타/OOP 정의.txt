++++++++++++++++++++++

- Object Oriented Programming의 줄임말로 '객체 지향 프로그래밍'을 뜻한다.

- 프로그래밍에서 필요한 데이터들을 추상화시켜 상태와 행위를 가진 객체를 만들고, 그 객체들 간 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다.
- 즉, 상태와 행위를 가진 객체들을 레고 블럭처럼 조립해서 하나의 프로그램을 만드는 것을 객체 지향 프로그래밍이라고 할 수 있다.

- 코드 재사용 용이, 유지 보수가 편리, 대형 프로젝트에 적합하다는 장점들이 있다.

- 처리속도가 상대적으로 느리고, 객체의 수가 늘어날수록 용량이 커질 수 있고, 설계 시 많은 시간과 노력이 필요하다는 단점이 있다.

- 4가지의 키워드들이 있다.

    - 추상화 : 불필요한 정보는 놔두고 중요한 정보만을 표시함으로서 공통의 속성이나 기능을 묶어 이름을 붙이는 것. (물고기, 사자, 토끼, 뱀이라는 이름을 가진 객체가 각각 있고 이 객체들을 하나로 묶으려고 할 때, 동물 또는 생물이라는 추상적인 객체로 크게 정의하여 묶는 것을 추상화라고 한다.)

    - 캡슐화 : 데이터와 기능을 하나의 단위로 묶는 것을 말한다. 즉, 속성과 기능을 하나의 객체 안에 만드는 것이다. (캡슐화를 통해 관련된 기능과 특성을 한 곳에 모으고 분류하기 때문에 재활용이 원활해지는 효과가 있다.)
    
    - 상속성 : 상위 개념의 특징을 하위 개념이 물려받은 것. (부모 클래스의 속성과 기능을 그대로 물려받아 사용할 수 있고, 기능의 일부분을 변경해야 할 경우 상속받은 자식 클래스에서 해당 기능만 다시 수정하여 사용할 수 있다.)
    
    - 다형성 : 하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있는 것. (오버라이딩 : 부모클래스의 메소드와 같은 이름, 매개변수를 재정의 하는 것. / 오버로딩 : 같은 이름의 함수를 여러개 정의하고 매개변수의 타입과 개수를 다르게 하여 매개변수에 따라 다르게 호출할 수 있도록 하는 것.)

++++++++++++++++++++++

- 프로그램을 단순히 데이터와 처리 방법으로 나누는 것이 아니라, 
프로그램을 수많은 '객체(object)'라는 기본 단위로 나누고 이들의 유기적인 상호작용을 통해 로직을 작성하는 프로그래밍 방식이다. 
여기에서 객체란 하나의 역할을 수행하는 '메소드와 변수(데이터)'의 묶음으로 봐야 한다.

++++++++++++++++++++++

- 클래스란 어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는 속성(attribute)과 행위(behavior)를 변수와 메서드로 정의한 것으로 객체를 만들기 위한 메타정보라고 볼 수 있다.
- 인스턴스란 클래스에서 정의한 것을 토대로 실제 메모리에 할당된 것으로 실제 프로그램에서 사용되는 데이터이다.

++++++++++++++++++++++
